{{> settings_header }}

<div class="settings-content">

    {{> form_errors}}

    <form class="form-horizontal" method="post" action='' id="form">
        <div class="form-controls" id="form-controls">
            {{#each items}}
            <div class="form-group">
                <label class="control-label col-sm-2" for="name">{{i18n.name}}</label>
                <div class="col-sm-8">
                    <input data-original-value="{{this}}" class="form-control" type="text" name="name" placeholder="{{i18n.name}}" value="{{this}}">
                </div>
                {{#if @first}}
                <button class="btn btn-default btn-add">
                    <i class="glyphicon glyphicon-plus"></i>
                </button>
                {{else}}
                <button class="btn btn-default btn-remove">
                    <i class="glyphicon glyphicon-minus"></i>
                </button>
                {{/if}}
            </div>
            {{/each}}
        </div>

        <input type='hidden' name="_csrf" value="{{csrftoken}}">
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-primary" name="submit" disabled="disabled">Submit</button>
            </div>
        </div>
        <script>
            var Settings = (function() {
                /// Private variables and functions
                var $form = $('#form');
                var $formControls = $('#form-controls');

                var removeInput = function(event) {
                    event.preventDefault();
                    event.stopPropagation();
                    $(this).parents('.form-group:first').remove();
                    checkDirties();
                };

                var addInput = function(event) {
                    event.preventDefault();
                    var $newEntry = $(this).parents('.form-group:first').clone().appendTo($formControls);
                    var $newInput = $newEntry.find('input');
                    $newInput.val('');
                    $newInput.data('original-value', '');
                    $newInput.removeClass('dirty');
                    $newInput.on('keyup', checkIfDirty);
                    $newEntry.find('.btn-add').removeClass('btn-add').addClass('btn-remove').html(
                        '<i class="glyphicon glyphicon-minus"></i>'
                    ).on('click', removeInput);
                };

                var checkDirties = function() {
                    // Loop over all the input fields to verify if someone is dirty or the original
                    // number of inputs is different from the current one.
                    // As result of the check, it sets the submit button disabled or active.

                    function filterDirty(e) {
                        return $(this).hasClass('dirty');
                    }
                    var $inputs = $formControls.find('input');

                    if ($inputs.filter(filterDirty).length == 0 &&
                        $inputs.length == $formControls.data('original-length')) {
                        $form.find('.btn-primary').attr('disabled', 'disabled');
                    }
                    else {
                        $form.find('.btn-primary').removeAttr('disabled');
                    }
                };

                var checkIfDirty = function(event) {
                    // Check if an input field is dirty (is modified)
                    var dirty = $(this).val() != $(this).data('original-value');
                    if (dirty) {
                        $(this).addClass('dirty');
                        // there is no need to check every field, we can just enable
                        // the submit button.
                        $form.find('.btn-primary').removeAttr('disabled');
                    }
                    else {
                        $(this).removeClass('dirty');
                        checkDirties();
                    }
                };

                var init = function() {
                    // Set the initial state on the input elements to detect if any of them has been
                    // modified.
                    var $inputs = $formControls.find('input');
                    $formControls.data('original-length', $inputs.length);

                    $inputs.on('keyup', checkIfDirty);
                    $formControls.find('.btn-remove').on('click', removeInput);
                    $formControls.find('.btn-add').on('click', addInput);
                };

                /// Public API
                return {
                    init: init
                };
            })();

            $(document).ready(Settings.init());
        </script>
    </form>

</div>