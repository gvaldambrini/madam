var InputSearch = React.createClass({

  searchClear: function() {
    return $("#search-clear");
  },
  searchInput: function() {
    return $("#search-input");
  },
  render: function() {
    return (
      <form className="search-form">
        <input id="search-input" type="text"
          placeholder="{{i18n.search}}" className="form-control"
          onChange={this.search}/>
        <span id="search-clear" className="glyphicon glyphicon-remove-circle"
          onClick={this.resetSearch}></span>
      </form>
    )
  },
  search: function() {
    var text = this.searchInput().val();
    this.searchClear().toggle(Boolean(text));
    this.props.search(text);
  },
  resetSearch: function() {
    this.searchInput().val('').focus();
    this.searchClear().hide();
    this.search();
  }
});


var PopoverTemplate = React.createClass({
  render: function() {
    return (
      <div className="popover" role="tooltip">
        <div className="arrow"></div>
        <h3 className="popover-title"></h3>

        <div className="popover-body">
          <div className="popover-content"></div>
          <button type="submit" className="btn btn-primary btn-confirm" name="submit">{this.props.confirm}</button>
          <button type="submit" className="btn btn-default btn-cancel" name="submit">{this.props.cancel}</button>
        </div>
      </div>
    );
  }
});


var BaseTable = {
  goToEditForm: function(event) {
    window.location.href = $(event.currentTarget).data('edit-url');
  },
  deleteRow: function($target) {
    var that = this;
    $.ajax({
      url: $target.data('delete-url'),
      method: 'POST',
      headers: {
          'X-CSRF-Token': '{{csrftoken}}'
      },
      complete: that.updateTable
    });
  },
  updateTable: function(obj, status) {
    if (status === 'success') {
      this.props.updateTable();
    }
  },
  renderHighlight(element) {
    return {
      __html: element
    }
  }
};