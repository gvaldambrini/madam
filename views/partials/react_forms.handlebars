
var SimpleInput = {
  handleChange: function(event) {
    this.props.handleChange(this.props.name, event.currentTarget.value);
  }
};


var FormInputDate = React.createClass({
  handleChange: function(event) {
    this.props.handleChange(this.props.name, $(event.currentTarget).val());
  },
  render: function() {
    var that = this;
    return (
      <div className="form-group">
        <label htmlFor={this.props.name} className="control-label col-sm-2">{this.props.label}</label>
        <div className="col-sm-10">
          <div className="input-group date" ref={
            function(div) {
              var $div = $(div);
              $div.datepicker();
              $div.datepicker('setDate', that.props.value);
            }
          }>
            <input type="text" name={this.props.name}
              placeholder="{{config.date_format}}" className="form-control"
              ref={
                function(input) {
                  // the react onChange event is not fired from the datepicker, so let's
                  // use the standard event.
                  $(input)
                    .unbind('change', that.handleChange)
                    .change(that.handleChange);
                }
              }/>
            <span className="input-group-addon">
              <i className="glyphicon glyphicon-th"></i>
            </span>
          </div>
        </div>
      </div>
    );
  },
  componentWillMount: function() {
    if (typeof this.props.orientation !== 'undefined') {
      $.fn.datepicker.defaults.orientation = this.props.orientation;
    }
    $.fn.datepicker.defaults.language = '{{config.language}}';
    $.fn.datepicker.defaults.daysOfWeekDisabled = "0";
    $.fn.datepicker.defaults.format = "{{config.date_format}}".toLowerCase();
    $.fn.datepicker.defaults.autoclose = true;
    $.fn.datepicker.defaults.weekStart = 1;
    $.fn.datepicker.defaults.todayHighlight = true;
    $.fn.datepicker.defaults.endDate = "0d";
  }
});


var FormInput = React.createClass({
  mixins: [SimpleInput],
  getInitialState: function() {
    return {value: ''}
  },
  componentWillMount: function() {
    this.setState({value: this.props.value});
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({value: nextProps.value});
  },
  render: function() {
    var mandatoryStar;
    if (this.props.mandatory) {
      mandatoryStar = <span className="mandatory">*</span>;
    }

    return (
      <div className="form-group">
        <label className="control-label col-sm-2" htmlFor={this.props.name}>
          {this.props.label}
          {mandatoryStar}
        </label>
        <div className="col-sm-10">
          <input className="form-control" type={this.props.type}
            name={this.props.name} placeholder={this.props.label}
            autoFocus={this.props.focus}
            value={this.state.value}
            onChange={this.handleChange}/>
        </div>
      </div>
    );
  }
});


var FormInputRadio = React.createClass({
  mixins: [SimpleInput],
  getInitialState: function() {
    return {value: ''}
  },
  componentWillMount: function() {
    this.setState({value: this.props.value});
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({value: nextProps.value});
  },
  render: function() {
    var that = this;
    var radioValues = this.props.values.map(function(obj) {
      return (
        <label className="radio-inline" key={obj.value}>
          <input type="radio" name={that.props.name} value={obj.value}
          checked={that.state.value === obj.value}
          onChange={that.handleChange}/>
          {obj.name}
        </label>
      );
    });

    return (
      <div className="form-group">
        <label className="control-label col-sm-2" htmlFor={this.props.name}>
          {this.props.label}
        </label>
        <div className="col-sm-8">
          {radioValues}
        </div>
      </div>
    );
  }
});


var FormInputAndCheckbox = React.createClass({
  getInitialState: function() {
    return {
      value: '',
      cbvalue: false
    }
  },
  componentWillMount: function() {
    this.setState({
      value: this.props.value,
      cbvalue: this.props.cbvalue
    });
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({
      value: nextProps.value,
      cbvalue: nextProps.cbvalue
    });
  },
  handleChange: function(event) {
    var target = event.currentTarget;
    var value = target.type == "checkbox" ? target.checked : target.value;
    this.props.handleChange(target.name, value);
  },
  render: function() {
    return (
      <div className="form-group">
        <label className="control-label col-sm-2" htmlFor={this.props.name}>
          {this.props.label}
        </label>
        <div className="col-sm-10">
          <input className="form-control" type={this.props.type}
            name={this.props.name} placeholder={this.props.label}
            value={this.state.value}
            onChange={this.handleChange}/>
        </div>
        <div className="col-sm-offset-2 col-sm-10">
          <div className="checkbox">
            <label>
              <input type="checkbox" name={this.props.cbname}
              checked={this.state.cbvalue}
              onChange={this.handleChange}/>
              {this.props.cblabel}
            </label>
          </div>
        </div>
      </div>
    );
  }
});


var FormTextArea = React.createClass({
  mixins: [SimpleInput],
  getInitialState: function() {
    return {value: ''}
  },
  componentWillMount: function() {
    this.setState({value: this.props.value});
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({value: nextProps.value});
  },
  render: function() {
    return (
      <div className="form-group">
        <label className="control-label col-sm-2">{this.props.label}</label>
        <div className="col-sm-10">
          <textarea name={this.props.name} className="form-control" rows="5"
            value={this.state.value}
            onChange={this.handleChange}>
          </textarea>
        </div>
      </div>
    );
  }
});
